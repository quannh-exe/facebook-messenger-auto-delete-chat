// ==UserScript==
// @name         Facebook Messenger Auto Delete Conversations (Debug Version)
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  T·ª± ƒë·ªông x√≥a t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán Facebook Messenger v·ªõi debug chi ti·∫øt
// @author       You
// @match        https://www.messenger.com/*
// @match        https://www.facebook.com/messages/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let isDeleting = false;
    let deletedCount = 0;
    let attemptCount = 0;
    let failedCount = 0;
    let deleteDelay = 3; // Delay gi·ªØa c√°c l·∫ßn x√≥a (gi√¢y)
    let conversationLoadDelay = 2; // Th·ªùi gian ƒë·ª£i cu·ªôc tr√≤ chuy·ªán load (gi√¢y)
    let menuClickDelay = 2; // Th·ªùi gian ƒë·ª£i menu hi·ªán ra (gi√¢y)
    let confirmClickDelay = 2; // Th·ªùi gian ƒë·ª£i dialog x√°c nh·∫≠n (gi√¢y)
    let afterDeleteDelay = 2; // Th·ªùi gian ƒë·ª£i sau khi x√≥a xong (gi√¢y)
    let debugMode = true;

    function debugLog(message, data = null) {
        if (debugMode) {
            console.log(`[Messenger Auto Delete] ${message}`, data || '');
        }
    }

    // T·∫°o giao di·ªán ng∆∞·ªùi d√πng v·ªõi debug info
    function createUI() {
        const ui = document.createElement('div');
        ui.id = 'messenger-auto-delete-ui';
        ui.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            width: 350px;
            background: #1877f2;
            color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            font-family: Arial, sans-serif;
            font-size: 14px;
            max-height: 80vh;
            overflow-y: auto;
        `;

        ui.innerHTML = `
            <div style="margin-bottom: 15px; font-weight: bold; text-align: center; font-size: 16px;">
                üóëÔ∏è Auto Delete Messenger (Debug)
            </div>

            <!-- N√∫t ƒëi·ªÅu khi·ªÉn n·ªïi b·∫≠t -->
            <div style="margin-bottom: 15px; text-align: center;">
                <button id="start-delete-btn" style="
                    background: linear-gradient(45deg, #42b883, #369870);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    margin-right: 10px;
                    font-weight: bold;
                    font-size: 14px;
                    box-shadow: 0 4px 8px rgba(66, 184, 131, 0.3);
                    transition: all 0.3s ease;
                ">üöÄ B·∫ÆT ƒê·∫¶U</button>

                <button id="stop-delete-btn" style="
                    background: linear-gradient(45deg, #e74c3c, #c0392b);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: bold;
                    font-size: 14px;
                    box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
                    transition: all 0.3s ease;
                    opacity: 0.5;
                " disabled>‚èπÔ∏è D·ª™NG</button>
            </div>

            <!-- Th·ªëng k√™ n·ªïi b·∫≠t -->
            <div style="background: rgba(255,255,255,0.1); padding: 10px; border-radius: 8px; margin-bottom: 15px;">
                <div style="display: flex; justify-content: space-between; font-size: 13px; font-weight: bold;">
                    <div>‚úÖ ƒê√£ x√≥a: <span id="deleted-count" style="color: #42b883;">0</span></div>
                    <div>üîÑ Th·ª≠: <span id="attempt-count" style="color: #3498db;">0</span></div>
                    <div>‚ùå Th·∫•t b·∫°i: <span id="failed-count" style="color: #e74c3c;">0</span></div>
                </div>
                <div style="margin-top: 8px; font-size: 12px; text-align: center; font-weight: bold;">
                    <div id="status" style="color: #f1c40f;">S·∫µn s√†ng</div>
                </div>
            </div>

            <!-- C√†i ƒë·∫∑t th·ªùi gian -->
            <div style="background: rgba(0,0,0,0.2); padding: 12px; border-radius: 8px; margin-bottom: 10px;">
                <div style="font-weight: bold; margin-bottom: 10px; text-align: center; font-size: 14px; color: #fff;">‚öôÔ∏è C√ÄI ƒê·∫∂T TH·ªúI GIAN</div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 12px;">
                    <div>
                        <label style="color: #fff; font-weight: bold;">Delay x√≥a (gi√¢y):</label><br>
                        <input type="number" id="delete-delay" value="${deleteDelay}" min="1" max="10"
                               style="width: 100%; padding: 6px; border: none; border-radius: 4px; color: black; font-size: 12px; font-weight: bold;">
                    </div>

                    <div>
                        <label style="color: #fff; font-weight: bold;">ƒê·ª£i load (gi√¢y):</label><br>
                        <input type="number" id="conversation-load-delay" value="${conversationLoadDelay}" min="1" max="5"
                               style="width: 100%; padding: 6px; border: none; border-radius: 4px; color: black; font-size: 12px; font-weight: bold;">
                    </div>

                    <div>
                        <label style="color: #fff; font-weight: bold;">ƒê·ª£i menu (gi√¢y):</label><br>
                        <input type="number" id="menu-click-delay" value="${menuClickDelay}" min="1" max="5"
                               style="width: 100%; padding: 6px; border: none; border-radius: 4px; color: black; font-size: 12px; font-weight: bold;">
                    </div>

                    <div>
                        <label style="color: #fff; font-weight: bold;">ƒê·ª£i x√°c nh·∫≠n (gi√¢y):</label><br>
                        <input type="number" id="confirm-click-delay" value="${confirmClickDelay}" min="1" max="5"
                               style="width: 100%; padding: 6px; border: none; border-radius: 4px; color: black; font-size: 12px; font-weight: bold;">
                    </div>
                </div>

                <div style="margin-top: 10px;">
                    <label style="font-size: 12px; color: #fff; font-weight: bold;">ƒê·ª£i sau khi x√≥a (gi√¢y):</label><br>
                    <input type="number" id="after-delete-delay" value="${afterDeleteDelay}" min="1" max="5"
                           style="width: 100%; padding: 6px; border: none; border-radius: 4px; color: black; font-size: 12px; font-weight: bold;">
                </div>
            </div>

            <!-- Debug Log -->
            <div style="font-size: 10px; background: rgba(0,0,0,0.3); padding: 8px; border-radius: 5px; max-height: 120px; overflow-y: auto;">
                <div style="font-weight: bold; margin-bottom: 5px;">üîç Debug Log:</div>
                <div id="debug-log"></div>
            </div>
        `;

        document.body.appendChild(ui);
        return ui;
    }

    function addDebugLog(message) {
        const debugLog = document.getElementById('debug-log');
        if (debugLog) {
            const time = new Date().toLocaleTimeString();
            debugLog.innerHTML += `<div>[${time}] ${message}</div>`;
            debugLog.scrollTop = debugLog.scrollHeight;
        }
    }

    // C·∫≠p nh·∫≠t th·ªëng k√™
    function updateStats() {
        document.getElementById('deleted-count').textContent = deletedCount;
        document.getElementById('attempt-count').textContent = attemptCount;
        document.getElementById('failed-count').textContent = failedCount;
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    function updateStatus(message) {
        document.getElementById('status').textContent = message;
        addDebugLog(message);
    }

    // T√¨m cu·ªôc tr√≤ chuy·ªán v·ªõi debug chi ti·∫øt
    function findAndClickFirstConversation() {
        debugLog('=== B·∫Øt ƒë·∫ßu t√¨m cu·ªôc tr√≤ chuy·ªán ===');
        
        // T√¨m t·∫•t c·∫£ c√°c element c√≥ th·ªÉ l√† cu·ªôc tr√≤ chuy·ªán
        const allElements = document.querySelectorAll('div, a, span');
        debugLog(`T·ªïng s·ªë elements: ${allElements.length}`);
        
        // T√¨m elements c√≥ text ch·ª©a t√™n ng∆∞·ªùi d√πng
        const conversationCandidates = [];
        
        for (let element of allElements) {
            const text = element.textContent?.trim();
            if (text && text.length > 2 && text.length < 100 && 
                !text.includes('Messenger') && 
                !text.includes('Search') &&
                !text.includes('T√¨m ki·∫øm') &&
                element.offsetParent !== null) {
                
                // Ki·ªÉm tra xem c√≥ ph·∫£i l√† t√™n ng∆∞·ªùi d√πng kh√¥ng
                if (/^[A-Za-z√Ä-·ªπ\s]{2,50}$/.test(text) || 
                    text.includes('Ng∆∞·ªùi d√πng Facebook')) {
                    conversationCandidates.push({
                        element: element,
                        text: text,
                        clickable: element.closest('div[role="row"]') || element.closest('a') || element.closest('div[tabindex]')
                    });
                }
            }
        }
        
        debugLog(`T√¨m th·∫•y ${conversationCandidates.length} ·ª©ng vi√™n cu·ªôc tr√≤ chuy·ªán`);
        
        // Th·ª≠ click v√†o ·ª©ng vi√™n ƒë·∫ßu ti√™n
        for (let candidate of conversationCandidates.slice(0, 5)) {
            debugLog(`Th·ª≠ click: "${candidate.text}"`);
            
            const clickTarget = candidate.clickable || candidate.element;
            if (clickTarget) {
                try {
                    clickTarget.click();
                    debugLog(`ƒê√£ click v√†o: "${candidate.text}"`);
                    return true;
                } catch (e) {
                    debugLog(`L·ªói khi click: ${e.message}`);
                }
            }
        }
        
        debugLog('Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán n√†o c√≥ th·ªÉ click');
        return false;
    }

    // T√¨m v√† click n√∫t 3 ch·∫•m, sau ƒë√≥ x√≥a
    function findAndClickDeleteButton() {
        return new Promise((resolve) => {
            debugLog('=== B·∫Øt ƒë·∫ßu t√¨m n√∫t 3 ch·∫•m ===');

            setTimeout(() => {
                // T√¨m n√∫t 3 ch·∫•m ·ªü HEADER c·ªßa cu·ªôc tr√≤ chuy·ªán (kh√¥ng ph·∫£i trong danh s√°ch)
                let menuButton = null;

                // T√¨m header/toolbar c·ªßa cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
                const chatHeaders = document.querySelectorAll('[role="banner"], [data-testid*="header"], .x1n2onr6');
                debugLog(`T√¨m th·∫•y ${chatHeaders.length} chat headers`);

                for (let header of chatHeaders) {
                    // T√¨m n√∫t 3 ch·∫•m trong header n√†y
                    const buttonsInHeader = header.querySelectorAll('div[role="button"], button');
                    debugLog(`Header c√≥ ${buttonsInHeader.length} buttons`);

                    for (let btn of buttonsInHeader) {
                        const ariaLabel = btn.getAttribute('aria-label') || '';
                        const svg = btn.querySelector('svg');

                        debugLog(`Header button: aria-label="${ariaLabel}"`);

                        // Ki·ªÉm tra c√≥ ph·∫£i n√∫t 3 ch·∫•m kh√¥ng
                        if (ariaLabel.toLowerCase().includes('more') ||
                            ariaLabel.toLowerCase().includes('conversation actions') ||
                            ariaLabel.toLowerCase().includes('h√†nh ƒë·ªông cu·ªôc tr√≤ chuy·ªán') ||
                            (svg && svg.innerHTML.includes('M12'))) {
                            debugLog(`‚úÖ T√¨m th·∫•y n√∫t 3 ch·∫•m trong header: "${ariaLabel}"`);
                            menuButton = btn;
                            break;
                        }
                    }
                    if (menuButton) break;
                }

                // N·∫øu kh√¥ng t√¨m th·∫•y trong header, th·ª≠ t√¨m t·ªïng qu√°t
                if (!menuButton) {
                    debugLog('Kh√¥ng t√¨m th·∫•y trong header, t√¨m t·ªïng qu√°t...');
                    const allButtons = document.querySelectorAll('div[role="button"], button');
                    debugLog(`T√¨m th·∫•y ${allButtons.length} buttons t·ªïng c·ªông`);

                    for (let btn of allButtons) {
                        const ariaLabel = btn.getAttribute('aria-label') || '';
                        const text = btn.textContent?.trim() || '';

                        if ((ariaLabel.toLowerCase().includes('more') ||
                             ariaLabel.toLowerCase().includes('conversation actions') ||
                             ariaLabel.toLowerCase().includes('h√†nh ƒë·ªông') ||
                             text === '‚ãØ' || text === '‚Ä¢‚Ä¢‚Ä¢') &&
                            btn.offsetParent !== null) {
                            debugLog(`T√¨m th·∫•y n√∫t menu: "${ariaLabel}"`);
                            menuButton = btn;
                            break;
                        }
                    }
                }

                if (!menuButton) {
                    debugLog('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 3 ch·∫•m');
                    resolve(false);
                    return;
                }

                debugLog('‚úÖ Click v√†o n√∫t 3 ch·∫•m...');
                menuButton.click();

                setTimeout(() => {
                    // T√¨m menu "X√≥a ƒëo·∫°n chat"
                    const allMenuItems = document.querySelectorAll('*');
                    debugLog(`ƒêang t√¨m trong ${allMenuItems.length} elements cho menu x√≥a`);

                    let deleteButton = null;

                    for (let item of allMenuItems) {
                        const text = item.textContent?.trim() || '';

                        if (text === 'X√≥a ƒëo·∫°n chat' || text === 'Delete chat' ||
                            text === 'X√≥a cu·ªôc tr√≤ chuy·ªán' || text === 'Delete conversation') {
                            debugLog(`‚úÖ T√¨m th·∫•y menu x√≥a: "${text}"`);
                            deleteButton = item;
                            break;
                        }
                    }

                    if (deleteButton) {
                        debugLog('‚úÖ Click v√†o "X√≥a ƒëo·∫°n chat"...');
                        deleteButton.click();

                        setTimeout(() => {
                            // T√¨m n√∫t x√°c nh·∫≠n "X√≥a ƒëo·∫°n chat" trong dialog
                            debugLog('=== T√¨m n√∫t x√°c nh·∫≠n trong dialog ===');

                            // T√¨m dialog x√°c nh·∫≠n
                            const dialogs = document.querySelectorAll('[role="dialog"], .x1n2onr6, div[style*="position: fixed"]');
                            debugLog(`T√¨m th·∫•y ${dialogs.length} dialogs`);

                            let confirmButton = null;

                            for (let dialog of dialogs) {
                                if (dialog.offsetParent !== null) {
                                    debugLog('ƒêang ki·ªÉm tra dialog...');

                                    // T√¨m t·∫•t c·∫£ buttons trong dialog
                                    const buttonsInDialog = dialog.querySelectorAll('div[role="button"], button');
                                    debugLog(`Dialog c√≥ ${buttonsInDialog.length} buttons`);

                                    for (let btn of buttonsInDialog) {
                                        const text = btn.textContent?.trim() || '';
                                        const ariaLabel = btn.getAttribute('aria-label') || '';

                                        debugLog(`Dialog button: text="${text}", aria-label="${ariaLabel}"`);

                                        // T√¨m n√∫t "X√≥a ƒëo·∫°n chat" m√†u xanh (n√∫t x√°c nh·∫≠n)
                                        if (text === 'X√≥a ƒëo·∫°n chat' || text === 'Delete chat') {
                                            // Ki·ªÉm tra xem c√≥ ph·∫£i n√∫t ch√≠nh (th∆∞·ªùng c√≥ background m√†u xanh)
                                            const style = window.getComputedStyle(btn);
                                            const bgColor = style.backgroundColor;

                                            debugLog(`N√∫t "${text}" c√≥ background: ${bgColor}`);

                                            // N√∫t x√°c nh·∫≠n th∆∞·ªùng c√≥ m√†u xanh ho·∫∑c l√† n√∫t cu·ªëi c√πng
                                            if (bgColor.includes('rgb(24, 119, 242)') || // Facebook blue
                                                bgColor.includes('blue') ||
                                                btn.classList.contains('x1i10hfl') || // Facebook button class
                                                !confirmButton) { // Fallback: l·∫•y n√∫t ƒë·∫ßu ti√™n t√¨m th·∫•y
                                                confirmButton = btn;
                                                debugLog(`‚úÖ T√¨m th·∫•y n√∫t x√°c nh·∫≠n: "${text}"`);
                                                break;
                                            }
                                        }
                                    }
                                    if (confirmButton) break;
                                }
                            }

                            // N·∫øu kh√¥ng t√¨m th·∫•y trong dialog, t√¨m t·ªïng qu√°t
                            if (!confirmButton) {
                                debugLog('Kh√¥ng t√¨m th·∫•y trong dialog, t√¨m t·ªïng qu√°t...');
                                const allButtons = document.querySelectorAll('div[role="button"], button');

                                for (let btn of allButtons) {
                                    const text = btn.textContent?.trim() || '';

                                    if ((text === 'X√≥a ƒëo·∫°n chat' || text === 'Delete chat') &&
                                        btn.offsetParent !== null) {
                                        confirmButton = btn;
                                        debugLog(`‚úÖ T√¨m th·∫•y n√∫t x√°c nh·∫≠n (t·ªïng qu√°t): "${text}"`);
                                        break;
                                    }
                                }
                            }

                            if (confirmButton) {
                                debugLog('‚úÖ Click n√∫t x√°c nh·∫≠n x√≥a...');
                                confirmButton.click();
                                resolve(true);
                            } else {
                                debugLog('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t x√°c nh·∫≠n');
                                resolve(false);
                            }
                        }, 2000);
                    } else {
                        debugLog('‚ùå Kh√¥ng t√¨m th·∫•y menu "X√≥a ƒëo·∫°n chat"');
                        resolve(false);
                    }
                }, confirmClickDelay * 1000);
            }, menuClickDelay * 1000);
        });
    }

    // H√†m ch√≠nh ƒë·ªÉ x√≥a cu·ªôc tr√≤ chuy·ªán
    async function deleteConversation() {
        if (!isDeleting) return;

        attemptCount++;
        updateStats();
        updateStatus(`L·∫ßn th·ª≠ ${attemptCount}: ƒêang t√¨m cu·ªôc tr√≤ chuy·ªán...`);

        const foundConversation = findAndClickFirstConversation();

        if (!foundConversation) {
            updateStatus('Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán');
            failedCount++;
            updateStats();

            if (isDeleting) {
                setTimeout(() => {
                    deleteConversation();
                }, deleteDelay * 1000);
            }
            return;
        }

        updateStatus('ƒê√£ click cu·ªôc tr√≤ chuy·ªán, ƒëang ƒë·ª£i load...');

        // ƒê·ª£i cu·ªôc tr√≤ chuy·ªán load xong tr∆∞·ªõc khi t√¨m n√∫t 3 ch·∫•m
        setTimeout(async () => {
            updateStatus('ƒêang t√¨m n√∫t 3 ch·∫•m trong header...');
            const deleted = await findAndClickDeleteButton();

            if (deleted) {
                deletedCount++;
                updateStatus(`‚úÖ X√≥a th√†nh c√¥ng! ƒêang ƒë·ª£i ${afterDeleteDelay}s tr∆∞·ªõc khi x√≥a ti·∫øp...`);

                // ƒê·ª£i sau khi x√≥a th√†nh c√¥ng tr∆∞·ªõc khi chuy·ªÉn sang cu·ªôc tr√≤ chuy·ªán ti·∫øp theo
                if (isDeleting) {
                    setTimeout(() => {
                        updateStatus('ƒêang t√¨m cu·ªôc tr√≤ chuy·ªán ti·∫øp theo...');
                        deleteConversation();
                    }, afterDeleteDelay * 1000);
                }
            } else {
                failedCount++;
                updateStatus('‚ùå X√≥a th·∫•t b·∫°i! Th·ª≠ l·∫°i...');

                // N·∫øu th·∫•t b·∫°i, th·ª≠ l·∫°i v·ªõi delay b√¨nh th∆∞·ªùng
                if (isDeleting) {
                    setTimeout(() => {
                        deleteConversation();
                    }, deleteDelay * 1000);
                }
            }

            updateStats();
        }, conversationLoadDelay * 1000); // ƒê·ª£i cu·ªôc tr√≤ chuy·ªán load
    }

    // Kh·ªüi t·∫°o
    function init() {
        if (!window.location.href.includes('messenger.com') && 
            !window.location.href.includes('facebook.com/messages')) {
            return;
        }

        setTimeout(() => {
            createUI();
            
            document.getElementById('start-delete-btn').addEventListener('click', () => {
                if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
                    isDeleting = true;
                    deleteDelay = parseInt(document.getElementById('delete-delay').value) || 3;
                    conversationLoadDelay = parseInt(document.getElementById('conversation-load-delay').value) || 2;
                    menuClickDelay = parseInt(document.getElementById('menu-click-delay').value) || 2;
                    confirmClickDelay = parseInt(document.getElementById('confirm-click-delay').value) || 2;
                    afterDeleteDelay = parseInt(document.getElementById('after-delete-delay').value) || 2;

                    // C·∫≠p nh·∫≠t giao di·ªán n√∫t
                    const startBtn = document.getElementById('start-delete-btn');
                    const stopBtn = document.getElementById('stop-delete-btn');

                    startBtn.disabled = true;
                    startBtn.style.opacity = '0.5';
                    stopBtn.disabled = false;
                    stopBtn.style.opacity = '1';

                    updateStatus('B·∫Øt ƒë·∫ßu x√≥a...');
                    deleteConversation();
                }
            });

            document.getElementById('stop-delete-btn').addEventListener('click', () => {
                isDeleting = false;

                // C·∫≠p nh·∫≠t giao di·ªán n√∫t
                const startBtn = document.getElementById('start-delete-btn');
                const stopBtn = document.getElementById('stop-delete-btn');

                startBtn.disabled = false;
                startBtn.style.opacity = '1';
                stopBtn.disabled = true;
                stopBtn.style.opacity = '0.5';

                updateStatus('ƒê√£ d·ª´ng');
            });

            // Event listeners cho c√°c input th·ªùi gian
            document.getElementById('delete-delay').addEventListener('change', (e) => {
                deleteDelay = parseInt(e.target.value) || 3;
            });

            document.getElementById('conversation-load-delay').addEventListener('change', (e) => {
                conversationLoadDelay = parseInt(e.target.value) || 2;
            });

            document.getElementById('menu-click-delay').addEventListener('change', (e) => {
                menuClickDelay = parseInt(e.target.value) || 2;
            });

            document.getElementById('confirm-click-delay').addEventListener('change', (e) => {
                confirmClickDelay = parseInt(e.target.value) || 2;
            });

            document.getElementById('after-delete-delay').addEventListener('change', (e) => {
                afterDeleteDelay = parseInt(e.target.value) || 2;
            });

            updateStatus('S·∫µn s√†ng - M·ªü Console (F12) ƒë·ªÉ xem debug chi ti·∫øt');
        }, 3000);
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
